openapi: 3.0.3
info:
  title: Swagger Cake Store - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: tuandungsonhoapy@gmail.com
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8081/api/v1
tags:
  - name: auth
    description: Operations about authentication
paths:
  /users/login: # Path
    post: # Method
      tags: # Tags
        - auth
      summary: Logs user into the system # Summary
      operationId: loginUser # Operation ID
      requestBody: # Request Body
        description: The user that needs to be logged in
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: tuandung@gmail.com
                password:
                  type: string
                  format: password
                  example: 123456
      responses: # Responses
        '200': # Status Code
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  isLogin:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  _id:
                    type: string
                    example: 5f7b3b3b7f3b7b3b7f3b7b3b
                  email:
                    type: string
                    example: tuandung@gmail.com
                  displayName:
                    type: string
                    example: tuandung
                  avatar:
                    type: string
                    example: https://www.google.com.vn/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png
                  require_2fa:
                    type: boolean
                    example: false
                  role: 
                    type: string
                    example: customer
                  isActive:
                    type: boolean
                    example: true
                  createdAt:
                    type: string
                    example: 1737550282062
                  updatedAt:
                    type: string
                    example: 1737550282062
        '400': # Status Code
          description: Invalid username/password supplied
        '404': # Status Code
          description: User not found
  /users/register:
    post:
      tags:
        - auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        description: The user that needs to be registered
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: tuandung@gmail.com
                password:
                  type: string
                  format: password
                  example: 123456
                confirmPassword:
                  type: string
                  format: password
                  example: 123456
                phoneNumber:
                  type: string
                  format: phone
                  example: 0123456789
                fullname:
                  type: string
                  example: Lê Anh Tuấn Dũng
                address:
                  type: string
                  example: 123/4/5 Lê Văn Sỹ, Phường 13, Quận 3, TP.HCM
                province:
                  type: string
                  example: TP.HCM
                district:
                  type: string
                  example: Quận 3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register account successfully!
                  User:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 5f7b3b3b7f3b7b3b7f3b7b3b
                      email:
                        type: string
                        example: tuandung@gmail.com
                      displayName:
                        type: string
                        example: tuandung
                      avatar:
                        type: string
                        example: https://www.google.com.vn/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png
                      require_2fa:
                        type: boolean
                        example: false
                      role:
                        type: string
                        example: customer
                      isActive:
                        type: boolean
                        example: true
                      createdAt:
                        type: string
                        example: 1737550282062
                      updatedAt:
                        type: string
                        example: 1737550282062
        '400':
          description: Invalid input
        '409':
          description: User already exists